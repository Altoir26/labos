#include <iostream> // Для работы с вводом и выводом
#include <fstream>  // Для работы с файлами
#include <string>   // Для работы со строками
#include <regex>    // Для работы с регулярными выражениями

// Функция для вывода информации о правильном использовании программы
void print_usage() {
    std::cout << "Usage: ./mygrep <pattern> <file>" << std::endl;
}

int main(int argc, char* argv[]) {
    std::string pattern;    // Строка для хранения шаблона регулярного выражения
    std::string file_name;  // Строка для хранения имени файла

    // Если передан один аргумент (шаблон), читаем входные данные из стандартного ввода
    if (argc == 2) {
        pattern = argv[1];  // Получаем шаблон из аргументов
        std::string line;   // Строка для хранения текущей строки ввода
        std::regex regex_pattern(pattern); // Создаем объект регулярного выражения

        // Считываем строки из стандартного ввода и ищем совпадения с шаблоном
        while (std::getline(std::cin, line)) {
            if (std::regex_search(line, regex_pattern)) { // Проверяем строку на совпадение
                std::cout << line << std::endl; // Выводим строку, если она соответствует шаблону
            }
        }
        return 0; // Успешное завершение программы
    } 
    // Если переданы два аргумента (шаблон и имя файла), читаем данные из файла
    else if (argc == 3) {
        pattern = argv[1];   // Получаем шаблон из аргументов
        file_name = argv[2]; // Получаем имя файла из аргументов
    } 
    // В случае неправильного числа аргументов выводим подсказку и завершаем программу
    else {
        print_usage(); // Выводим инструкцию по использованию
        return 1;      // Завершаем программу с кодом ошибки
    }

    // Открываем файл для чтения
    std::ifstream file(file_name);
    if (!file.is_open()) {
        // Если файл не удалось открыть, выводим сообщение об ошибке
        std::cerr << "Error: Could not open file " << file_name << std::endl;
        return 1; // Завершаем программу с кодом ошибки
    }

    std::regex regex_pattern(pattern); // Создаем объект регулярного выражения
    std::string line; // Строка для хранения текущей строки из файла

    // Считываем строки из файла и ищем совпадения с шаблоном
    while (std::getline(file, line)) {
        if (std::regex_search(line, regex_pattern)) { // Проверяем строку на совпадение
            std::cout << line << std::endl; // Выводим строку, если она соответствует шаблону
        }
    }

    file.close(); // Закрываем файл после чтения
    return 0; // Успешное завершение программы
}
